"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {
    var manager, productService, regionService, paymentProviderService, fulfillmentProviderService, shippingProfileService, shippingOptionService, regionRepository, shippingProfileRepository, shippingOptionRepository, allProductsCount, allRegionCount, allShippingProfileCount, allShippingOptionCount, productFields, regionFields, shippingProfileFields, shippingOptionFields, productRelations, regionRelations, shippingProfileRelations, shippingOptionRelations, productListConfig, regionListConfig, shippingOptionsConfig, shippingProfileConfig, allRegions, allProducts, allPaymentProviders, allFulfillmentProviders, allShippingOptions, allShippingProfiles, response;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            manager = req.scope.resolve("manager");
            productService = req.scope.resolve("productService");
            regionService = req.scope.resolve("regionService");
            paymentProviderService = req.scope.resolve("paymentProviderService");
            fulfillmentProviderService = req.scope.resolve("fulfillmentProviderService");
            shippingProfileService = req.scope.resolve("shippingProfileService");
            shippingOptionService = req.scope.resolve("shippingOptionService");
            regionRepository = req.scope.resolve("regionRepository");
            shippingProfileRepository = req.scope.resolve("shippingProfileRepository");
            shippingOptionRepository = req.scope.resolve("shippingOptionRepository");
            _context.next = 13;
            return productService.count();

          case 13:
            allProductsCount = _context.sent;
            _context.next = 16;
            return getCount(manager, regionRepository);

          case 16:
            allRegionCount = _context.sent;
            _context.next = 19;
            return getCount(manager, shippingProfileRepository);

          case 19:
            allShippingProfileCount = _context.sent;
            _context.next = 22;
            return getCount(manager, shippingOptionRepository);

          case 22:
            allShippingOptionCount = _context.sent;
            productFields = ["id", "title", "subtitle", "description", "handle", "is_giftcard", "discountable", "thumbnail", "weight", "length", "height", "width", "hs_code", "origin_country", "mid_code", "material", "metadata"];
            regionFields = ["id", "name", "tax_rate", "tax_code", "metadata"];
            shippingProfileFields = ["id", "name", "type", "metadata"];
            shippingOptionFields = ["id", "name", "price_type", "amount", "is_return", "admin_only", "data", "metadata"];
            productRelations = ["variants", "variants.prices", "variants.options", "images", "options", "tags", "type", "collection", "profile"];
            regionRelations = ["countries", "payment_providers", "fulfillment_providers", "currency"];
            shippingProfileRelations = ["products", "shipping_options", "shipping_options.profile", "shipping_options.requirements", "shipping_options.provider", "shipping_options.region", "shipping_options.region.countries", "shipping_options.region.payment_providers", "shipping_options.region.fulfillment_providers", "shipping_options.region.currency"];
            shippingOptionRelations = ["region", "region.countries", "region.payment_providers", "region.fulfillment_providers", "region.currency", "profile", "profile.products", "profile.shipping_options", "requirements", "provider"]; // Fetching all entries at once. Can be optimized

            productListConfig = {
              skip: 0,
              take: allProductsCount,
              select: productFields,
              relations: productRelations
            };
            regionListConfig = {
              skip: 0,
              take: allRegionCount,
              select: regionFields,
              relations: regionRelations
            };
            shippingOptionsConfig = {
              skip: 0,
              take: allShippingOptionCount,
              select: shippingOptionFields,
              relations: shippingOptionRelations
            };
            shippingProfileConfig = {
              skip: 0,
              take: allShippingProfileCount,
              select: shippingProfileFields,
              relations: shippingProfileRelations
            };
            _context.next = 37;
            return regionService.list({}, regionListConfig);

          case 37:
            allRegions = _context.sent;
            _context.next = 40;
            return productService.list({}, productListConfig);

          case 40:
            allProducts = _context.sent;
            _context.next = 43;
            return paymentProviderService.list();

          case 43:
            allPaymentProviders = _context.sent;
            _context.next = 46;
            return fulfillmentProviderService.list();

          case 46:
            allFulfillmentProviders = _context.sent;
            _context.next = 49;
            return shippingOptionService.list({}, shippingOptionsConfig);

          case 49:
            allShippingOptions = _context.sent;
            _context.next = 52;
            return shippingProfileService.list({}, shippingProfileConfig);

          case 52:
            allShippingProfiles = _context.sent;
            response = {
              products: allProducts,
              regions: allRegions,
              paymentProviders: allPaymentProviders,
              fulfillmentProviders: allFulfillmentProviders,
              shippingOptions: allShippingOptions,
              shippingProfiles: allShippingProfiles
            };
            res.status(200).send(response);
            _context.next = 60;
            break;

          case 57:
            _context.prev = 57;
            _context.t0 = _context["catch"](0);
            res.status(400).send("Webhook error: ".concat(_context.t0.message));

          case 60:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 57]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}(); // eslint-disable-next-line valid-jsdoc

/**
 * Return total number of entries for a repository
 * @return {*}
 */


exports["default"] = _default;

function getCount(manager, repository) {
  var customRepository = manager.getCustomRepository(repository);
  return customRepository.count();
}
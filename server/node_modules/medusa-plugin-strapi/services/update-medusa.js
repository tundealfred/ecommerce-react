"use strict";

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _medusaInterfaces = require("medusa-interfaces");

var _redisKeyManager = require("../utils/redis-key-manager");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function isEmptyObject(obj) {
  // eslint-disable-next-line guard-for-in
  for (var i in obj) {
    return false;
  }

  return true;
}

var UpdateMedusaService = /*#__PURE__*/function (_BaseService) {
  _inherits(UpdateMedusaService, _BaseService);

  var _super = _createSuper(UpdateMedusaService);

  function UpdateMedusaService(_ref) {
    var _this;

    var productService = _ref.productService,
        productVariantService = _ref.productVariantService,
        regionService = _ref.regionService,
        redisClient = _ref.redisClient,
        productCategoryService = _ref.productCategoryService,
        productCollectionService = _ref.productCollectionService;

    _classCallCheck(this, UpdateMedusaService);

    _this = _super.call(this);
    _this.productService_ = productService;
    _this.productVariantService_ = productVariantService;
    _this.redisClient_ = redisClient;
    _this.regionService_ = regionService;
    _this.productCategoryService_ = productCategoryService;
    _this.productCollectionService_ = productCollectionService;
    return _this;
  }

  _createClass(UpdateMedusaService, [{
    key: "sendStrapiProductVariantToMedusa",
    value: function () {
      var _sendStrapiProductVariantToMedusa = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(variantEntry, variantId) {
        var _this2 = this;

        var ignore, variant, update, updatedVariant;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _redisKeyManager.shouldIgnore_)(variantId, "medusa", this.redisClient_);

              case 2:
                ignore = _context2.sent;

                if (!ignore) {
                  _context2.next = 5;
                  break;
                }

                return _context2.abrupt("return");

              case 5:
                _context2.prev = 5;
                _context2.next = 8;
                return this.productVariantService_.retrieve(variantId);

              case 8:
                variant = _context2.sent;
                update = {};

                if (variant.title !== variantEntry.title) {
                  update.title = variantEntry.title;
                }

                if (isEmptyObject(update)) {
                  _context2.next = 16;
                  break;
                }

                _context2.next = 14;
                return this.productVariantService_.update(variantId, update).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return (0, _redisKeyManager.addIgnore_)(variantId, "strapi", _this2.redisClient_);

                        case 2:
                          return _context.abrupt("return", _context.sent);

                        case 3:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                })));

              case 14:
                updatedVariant = _context2.sent;
                return _context2.abrupt("return", updatedVariant);

              case 16:
                _context2.next = 22;
                break;

              case 18:
                _context2.prev = 18;
                _context2.t0 = _context2["catch"](5);
                console.log(_context2.t0);
                return _context2.abrupt("return", false);

              case 22:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[5, 18]]);
      }));

      function sendStrapiProductVariantToMedusa(_x, _x2) {
        return _sendStrapiProductVariantToMedusa.apply(this, arguments);
      }

      return sendStrapiProductVariantToMedusa;
    }()
  }, {
    key: "sendStrapiProductToMedusa",
    value: function () {
      var _sendStrapiProductToMedusa = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(productEntry, productId) {
        var _this3 = this;

        var ignore, product, update, title, subtitle, description, handle, thumb;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _redisKeyManager.shouldIgnore_)(productId, "medusa", this.redisClient_);

              case 2:
                ignore = _context4.sent;

                if (!ignore) {
                  _context4.next = 5;
                  break;
                }

                return _context4.abrupt("return");

              case 5:
                _context4.prev = 5;
                _context4.next = 8;
                return this.productService_.retrieve(productId);

              case 8:
                product = _context4.sent;
                update = {}; // update Medusa product with Strapi product fields

                title = productEntry.title;
                subtitle = productEntry.subtitle;
                description = productEntry.description;
                handle = productEntry.handle;

                if (product.title !== title) {
                  update.title = title;
                }

                if (product.subtitle !== subtitle) {
                  update.subtitle = subtitle;
                }

                if (product.description !== description) {
                  update.description = description;
                }

                if (product.handle !== handle) {
                  update.handle = handle;
                } // Get the thumbnail, if present


                if (productEntry.thumbnail) {
                  thumb = null;
                  update.thumbnail = thumb;
                }

                if (isEmptyObject(update)) {
                  _context4.next = 22;
                  break;
                }

                _context4.next = 22;
                return this.productService_.update(productId, update).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _context3.next = 2;
                          return (0, _redisKeyManager.addIgnore_)(productId, "strapi", _this3.redisClient_);

                        case 2:
                          return _context3.abrupt("return", _context3.sent);

                        case 3:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                })));

              case 22:
                _context4.next = 28;
                break;

              case 24:
                _context4.prev = 24;
                _context4.t0 = _context4["catch"](5);
                console.log(_context4.t0);
                return _context4.abrupt("return", false);

              case 28:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[5, 24]]);
      }));

      function sendStrapiProductToMedusa(_x3, _x4) {
        return _sendStrapiProductToMedusa.apply(this, arguments);
      }

      return sendStrapiProductToMedusa;
    }()
  }, {
    key: "sendStrapiRegionToMedusa",
    value: function () {
      var _sendStrapiRegionToMedusa = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(regionEntry, regionId) {
        var _this4 = this;

        var ignore, region, update, updatedRegion;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return (0, _redisKeyManager.shouldIgnore_)(regionId, "medusa", this.redisClient_);

              case 2:
                ignore = _context6.sent;

                if (!ignore) {
                  _context6.next = 5;
                  break;
                }

                return _context6.abrupt("return");

              case 5:
                _context6.prev = 5;
                _context6.next = 8;
                return this.regionService_.retrieve(regionId);

              case 8:
                region = _context6.sent;
                update = {};

                if (region.name !== regionEntry.name) {
                  update.name = regionEntry.name;
                }

                if (isEmptyObject(update)) {
                  _context6.next = 16;
                  break;
                }

                _context6.next = 14;
                return this.regionService_.update(regionId, update).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          _context5.next = 2;
                          return (0, _redisKeyManager.addIgnore_)(regionId, "strapi", _this4.redisClient_);

                        case 2:
                          return _context5.abrupt("return", _context5.sent);

                        case 3:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                })));

              case 14:
                updatedRegion = _context6.sent;
                return _context6.abrupt("return", updatedRegion);

              case 16:
                _context6.next = 22;
                break;

              case 18:
                _context6.prev = 18;
                _context6.t0 = _context6["catch"](5);
                console.log(_context6.t0);
                return _context6.abrupt("return", false);

              case 22:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[5, 18]]);
      }));

      function sendStrapiRegionToMedusa(_x5, _x6) {
        return _sendStrapiRegionToMedusa.apply(this, arguments);
      }

      return sendStrapiRegionToMedusa;
    }()
  }, {
    key: "sendStrapiProductCategoryToMedusa",
    value: function () {
      var _sendStrapiProductCategoryToMedusa = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(productCategoryEntry, productCategoryId) {
        var _this5 = this;

        var ignore, productCategory, update, name, description, handle;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return (0, _redisKeyManager.shouldIgnore_)(productCategoryId, "medusa", this.redisClient_);

              case 2:
                ignore = _context8.sent;

                if (!ignore) {
                  _context8.next = 5;
                  break;
                }

                return _context8.abrupt("return");

              case 5:
                _context8.prev = 5;
                _context8.next = 8;
                return this.productCategoryService_.retrieve(productCategoryId);

              case 8:
                productCategory = _context8.sent;
                update = {};
                name = productCategoryEntry.name;
                description = productCategoryEntry.description;
                handle = productCategoryEntry.handle;

                if (productCategory.name !== name) {
                  update.name = name;
                }

                if (productCategory.description !== description) {
                  update.description = description;
                }

                if (productCategory.handle !== handle) {
                  update.handle = handle;
                }

                if (isEmptyObject(update)) {
                  _context8.next = 19;
                  break;
                }

                _context8.next = 19;
                return this.productCategoryService_.update(productCategoryId, update).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                  return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          _context7.next = 2;
                          return (0, _redisKeyManager.addIgnore_)(productCategoryId, "strapi", _this5.redisClient_);

                        case 2:
                          return _context7.abrupt("return", _context7.sent);

                        case 3:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                })));

              case 19:
                _context8.next = 25;
                break;

              case 21:
                _context8.prev = 21;
                _context8.t0 = _context8["catch"](5);
                console.log(_context8.t0);
                return _context8.abrupt("return", false);

              case 25:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this, [[5, 21]]);
      }));

      function sendStrapiProductCategoryToMedusa(_x7, _x8) {
        return _sendStrapiProductCategoryToMedusa.apply(this, arguments);
      }

      return sendStrapiProductCategoryToMedusa;
    }()
  }, {
    key: "sendStrapiProductCollectionToMedusa",
    value: function () {
      var _sendStrapiProductCollectionToMedusa = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(productCollectionEntry, productCollectionId) {
        var _this6 = this;

        var ignore, productCollection, update, title, handle;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return (0, _redisKeyManager.shouldIgnore_)(productCollectionId, "medusa", this.redisClient_);

              case 2:
                ignore = _context10.sent;

                if (!ignore) {
                  _context10.next = 5;
                  break;
                }

                return _context10.abrupt("return");

              case 5:
                _context10.prev = 5;
                _context10.next = 8;
                return this.productCollectionService_.retrieve(productCollectionId);

              case 8:
                productCollection = _context10.sent;
                update = {};
                title = productCollectionEntry.title;
                handle = productCollectionEntry.handle;

                if (productCollection.title !== title) {
                  update.title = title;
                }

                if (productCollection.handle !== handle) {
                  update.handle = handle;
                }

                if (isEmptyObject(update)) {
                  _context10.next = 17;
                  break;
                }

                _context10.next = 17;
                return this.productCollectionService_.update(productCollectionId, update).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          _context9.next = 2;
                          return (0, _redisKeyManager.addIgnore_)(productCollectionId, "strapi", _this6.redisClient_);

                        case 2:
                          return _context9.abrupt("return", _context9.sent);

                        case 3:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                })));

              case 17:
                _context10.next = 23;
                break;

              case 19:
                _context10.prev = 19;
                _context10.t0 = _context10["catch"](5);
                console.log(_context10.t0);
                return _context10.abrupt("return", false);

              case 23:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this, [[5, 19]]);
      }));

      function sendStrapiProductCollectionToMedusa(_x9, _x10) {
        return _sendStrapiProductCollectionToMedusa.apply(this, arguments);
      }

      return sendStrapiProductCollectionToMedusa;
    }()
  }]);

  return UpdateMedusaService;
}(_medusaInterfaces.BaseService);

var _default = UpdateMedusaService;
exports["default"] = _default;
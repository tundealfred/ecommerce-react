"use strict";

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _medusaInterfaces = require("medusa-interfaces");

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var IGNORE_THRESHOLD = 3; // seconds

var UpdateStrapiService = /*#__PURE__*/function (_BaseService) {
  _inherits(UpdateStrapiService, _BaseService);

  var _super = _createSuper(UpdateStrapiService);

  function UpdateStrapiService(_ref, options) {
    var _this$protocol, _this$options_$strapi, _this$options_$strapi2;

    var _this;

    var regionService = _ref.regionService,
        productService = _ref.productService,
        redisClient = _ref.redisClient,
        productVariantService = _ref.productVariantService,
        eventBusService = _ref.eventBusService,
        productCategoryService = _ref.productCategoryService,
        productCollectionService = _ref.productCollectionService;

    _classCallCheck(this, UpdateStrapiService);

    _this = _super.call(this);
    _this.productService_ = productService;
    _this.productVariantService_ = productVariantService;
    _this.regionService_ = regionService;
    _this.eventBus_ = eventBusService;
    _this.productCategory_ = productCategoryService;
    _this.productCollection_ = productCollectionService;
    _this.options_ = options;
    _this.protocol = _this.options_.strapi_protocol;
    _this.strapi_URL_STRING = "".concat((_this$protocol = _this.protocol) !== null && _this$protocol !== void 0 ? _this$protocol : "https", "://").concat((_this$options_$strapi = _this.options_.strapi_url) !== null && _this$options_$strapi !== void 0 ? _this$options_$strapi : "localhost", ":").concat((_this$options_$strapi2 = _this.options_.strapi_port) !== null && _this$options_$strapi2 !== void 0 ? _this$options_$strapi2 : 1337);
    _this.strapiAuthToken = "";

    _this.checkStrapiHealth().then(function (res) {
      if (res) {
        _this.loginToStrapi();
      }
    });

    _this.redis_ = redisClient;
    return _this;
  }

  _createClass(UpdateStrapiService, [{
    key: "addIgnore_",
    value: function () {
      var _addIgnore_ = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(id, side) {
        var key;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                key = "".concat(id, "_ignore_").concat(side);
                _context.next = 3;
                return this.redis_.set(key, 1, "EX", this.options_.ignore_threshold || IGNORE_THRESHOLD);

              case 3:
                return _context.abrupt("return", _context.sent);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function addIgnore_(_x, _x2) {
        return _addIgnore_.apply(this, arguments);
      }

      return addIgnore_;
    }()
  }, {
    key: "shouldIgnore_",
    value: function () {
      var _shouldIgnore_ = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id, side) {
        var key;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                key = "".concat(id, "_ignore_").concat(side);
                _context2.next = 3;
                return this.redis_.get(key);

              case 3:
                return _context2.abrupt("return", _context2.sent);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function shouldIgnore_(_x3, _x4) {
        return _shouldIgnore_.apply(this, arguments);
      }

      return shouldIgnore_;
    }()
  }, {
    key: "getVariantEntries_",
    value: function () {
      var _getVariantEntries_ = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(variants) {
        var _this2 = this;

        var allVariants;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;
                allVariants = variants.map( /*#__PURE__*/function () {
                  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(variant) {
                    var result;
                    return regeneratorRuntime.wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            _context3.next = 2;
                            return _this2.updateProductVariantInStrapi(variant);

                          case 2:
                            result = _context3.sent;
                            return _context3.abrupt("return", result.productVariant);

                          case 4:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3);
                  }));

                  return function (_x6) {
                    return _ref2.apply(this, arguments);
                  };
                }());
                return _context4.abrupt("return", Promise.all(allVariants));

              case 5:
                _context4.prev = 5;
                _context4.t0 = _context4["catch"](0);
                throw _context4.t0;

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, null, [[0, 5]]);
      }));

      function getVariantEntries_(_x5) {
        return _getVariantEntries_.apply(this, arguments);
      }

      return getVariantEntries_;
    }()
  }, {
    key: "createImageAssets",
    value: function () {
      var _createImageAssets = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(product) {
        var _this3 = this;

        var assets;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return Promise.all(product.images.filter(function (image) {
                  return image.url !== product.thumbnail;
                }).map( /*#__PURE__*/function () {
                  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(image, i) {
                    var result;
                    return regeneratorRuntime.wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            _context5.next = 2;
                            return _this3.createEntryInStrapi("images", product.id, {
                              image_id: image.id,
                              url: image.url,
                              metadata: image.metadata || {}
                            });

                          case 2:
                            result = _context5.sent;
                            return _context5.abrupt("return", result.image);

                          case 4:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _callee5);
                  }));

                  return function (_x8, _x9) {
                    return _ref3.apply(this, arguments);
                  };
                }()));

              case 2:
                assets = _context6.sent;
                return _context6.abrupt("return", assets || []);

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function createImageAssets(_x7) {
        return _createImageAssets.apply(this, arguments);
      }

      return createImageAssets;
    }()
  }, {
    key: "getCustomField",
    value: function getCustomField(field, type) {
      var customOptions = this.options_["custom_".concat(type, "_fields")];

      if (customOptions) {
        return customOptions[field] || field;
      } else {
        return field;
      }
    }
  }, {
    key: "createProductInStrapi",
    value: function () {
      var _createProductInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(productId) {
        var hasType, relations, product, response;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.getType("products").then(function () {
                  return true;
                })["catch"](function (err) {
                  // console.log(err)
                  return false;
                });

              case 2:
                hasType = _context7.sent;

                if (hasType) {
                  _context7.next = 5;
                  break;
                }

                return _context7.abrupt("return", Promise.resolve());

              case 5:
                // eslint-disable-next-line no-useless-catch
                relations = ["options", "variants", "variants.prices", "variants.options", "type", "collection", "tags", "images"];

                if (process.env.MEDUSA_FF_PRODUCT_CATEGORIES === "true") {
                  relations.push("categories");
                }

                _context7.prev = 7;
                _context7.next = 10;
                return this.productService_.retrieve(productId, {
                  relations: relations,
                  select: ["id", "title", "subtitle", "description", "handle", "is_giftcard", "discountable", "thumbnail", "weight", "length", "height", "width", "hs_code", "origin_country", "mid_code", "material", "metadata"]
                });

              case 10:
                product = _context7.sent;

                if (!product) {
                  _context7.next = 17;
                  break;
                }

                _context7.next = 14;
                return this.createEntryInStrapi("products", productId, product);

              case 14:
                response = _context7.sent;
                console.log("Product Strapi Id - ", response);
                return _context7.abrupt("return", response);

              case 17:
                _context7.next = 22;
                break;

              case 19:
                _context7.prev = 19;
                _context7.t0 = _context7["catch"](7);
                throw _context7.t0;

              case 22:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this, [[7, 19]]);
      }));

      function createProductInStrapi(_x10) {
        return _createProductInStrapi.apply(this, arguments);
      }

      return createProductInStrapi;
    }()
  }, {
    key: "createProductVariantInStrapi",
    value: function () {
      var _createProductVariantInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(variantId) {
        var hasType, variant, response;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.getType("product-variants").then(function () {
                  return true;
                })["catch"](function () {
                  return false;
                });

              case 2:
                hasType = _context8.sent;

                if (hasType) {
                  _context8.next = 5;
                  break;
                }

                return _context8.abrupt("return", Promise.resolve());

              case 5:
                _context8.prev = 5;
                _context8.next = 8;
                return this.productVariantService_.retrieve(variantId, {
                  relations: ["prices", "options", "product"]
                });

              case 8:
                variant = _context8.sent;

                if (!variant) {
                  _context8.next = 15;
                  break;
                }

                _context8.next = 12;
                return this.createEntryInStrapi("product-variants", variantId, variant);

              case 12:
                response = _context8.sent;
                console.log("Product Variant Strapi Id - ", response);
                return _context8.abrupt("return", response);

              case 15:
                _context8.next = 20;
                break;

              case 17:
                _context8.prev = 17;
                _context8.t0 = _context8["catch"](5);
                throw _context8.t0;

              case 20:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this, [[5, 17]]);
      }));

      function createProductVariantInStrapi(_x11) {
        return _createProductVariantInStrapi.apply(this, arguments);
      }

      return createProductVariantInStrapi;
    }()
  }, {
    key: "createRegionInStrapi",
    value: function () {
      var _createRegionInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(regionId) {
        var hasType, region, response;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.getType("regions").then(function () {
                  return true;
                })["catch"](function () {
                  return false;
                });

              case 2:
                hasType = _context9.sent;

                if (hasType) {
                  _context9.next = 6;
                  break;
                }

                console.log('Type "Regions" doesnt exist in Strapi');
                return _context9.abrupt("return", Promise.resolve());

              case 6:
                _context9.prev = 6;
                _context9.next = 9;
                return this.regionService_.retrieve(regionId, {
                  relations: ["countries", "payment_providers", "fulfillment_providers", "currency"],
                  select: ["id", "name", "tax_rate", "tax_code", "metadata"]
                });

              case 9:
                region = _context9.sent;
                _context9.next = 12;
                return this.createEntryInStrapi("regions", regionId, region);

              case 12:
                response = _context9.sent;
                console.log("Region Strapi Id - ", response);
                return _context9.abrupt("return", response);

              case 17:
                _context9.prev = 17;
                _context9.t0 = _context9["catch"](6);
                throw _context9.t0;

              case 20:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this, [[6, 17]]);
      }));

      function createRegionInStrapi(_x12) {
        return _createRegionInStrapi.apply(this, arguments);
      }

      return createRegionInStrapi;
    }()
  }, {
    key: "updateRegionInStrapi",
    value: function () {
      var _updateRegionInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(data) {
        var hasType, updateFields, found, ignore, region, response;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.getType("regions").then(function (res) {
                  // console.log(res.data)
                  return true;
                })["catch"](function (error) {
                  // console.log(error.response.status)
                  return false;
                });

              case 2:
                hasType = _context10.sent;

                if (hasType) {
                  _context10.next = 5;
                  break;
                }

                return _context10.abrupt("return", Promise.resolve());

              case 5:
                updateFields = ["name", "currency_code", "countries", "payment_providers", "fulfillment_providers"]; // check if update contains any fields in Strapi to minimize runs

                found = data.fields.find(function (f) {
                  return updateFields.includes(f);
                });

                if (found) {
                  _context10.next = 9;
                  break;
                }

                return _context10.abrupt("return");

              case 9:
                _context10.prev = 9;
                _context10.next = 12;
                return this.shouldIgnore_(data.id, "strapi");

              case 12:
                ignore = _context10.sent;

                if (!ignore) {
                  _context10.next = 15;
                  break;
                }

                return _context10.abrupt("return");

              case 15:
                _context10.next = 17;
                return this.regionService_.retrieve(data.id, {
                  relations: ["countries", "payment_providers", "fulfillment_providers", "currency"],
                  select: ["id", "name", "tax_rate", "tax_code", "metadata"]
                });

              case 17:
                region = _context10.sent;

                if (!region) {
                  _context10.next = 23;
                  break;
                }

                _context10.next = 21;
                return this.updateEntryInStrapi("regions", region.id, region);

              case 21:
                response = _context10.sent;
                console.log("Region Strapi Id - ", response);

              case 23:
                return _context10.abrupt("return", region);

              case 26:
                _context10.prev = 26;
                _context10.t0 = _context10["catch"](9);
                throw _context10.t0;

              case 29:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this, [[9, 26]]);
      }));

      function updateRegionInStrapi(_x13) {
        return _updateRegionInStrapi.apply(this, arguments);
      }

      return updateRegionInStrapi;
    }()
  }, {
    key: "updateProductInStrapi",
    value: function () {
      var _updateProductInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(data) {
        var hasType, updateFields, found, ignore, relations, product, response;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.getType("products").then(function (res) {
                  // console.log(res.data)
                  return true;
                })["catch"](function (error) {
                  // console.log(error.response.status)
                  return false;
                });

              case 2:
                hasType = _context11.sent;

                if (hasType) {
                  _context11.next = 5;
                  break;
                }

                return _context11.abrupt("return", Promise.resolve());

              case 5:
                // console.log(data)
                updateFields = ["variants", "options", "tags", "title", "subtitle", "tags", "type", "type_id", "collection", "collection_id", "thumbnail", "categories"]; // check if update contains any fields in Strapi to minimize runs

                found = data.fields.find(function (f) {
                  return updateFields.includes(f);
                });

                if (found) {
                  _context11.next = 9;
                  break;
                }

                return _context11.abrupt("return", Promise.resolve());

              case 9:
                _context11.prev = 9;
                _context11.next = 12;
                return this.shouldIgnore_(data.id, "strapi");

              case 12:
                ignore = _context11.sent;

                if (!ignore) {
                  _context11.next = 16;
                  break;
                }

                console.log("Strapi has just updated this product which triggered this function. IGNORING... ");
                return _context11.abrupt("return", Promise.resolve());

              case 16:
                relations = ["options", "variants", "variants.prices", "variants.options", "type", "collection", "tags", "images"];

                if (process.env.MEDUSA_FF_PRODUCT_CATEGORIES === "true") {
                  relations.push("categories");
                }

                _context11.next = 20;
                return this.productService_.retrieve(data.id, {
                  relations: relations,
                  select: ["id", "title", "subtitle", "description", "handle", "is_giftcard", "discountable", "thumbnail", "weight", "length", "height", "width", "hs_code", "origin_country", "mid_code", "material", "metadata"]
                });

              case 20:
                product = _context11.sent;

                if (!product) {
                  _context11.next = 26;
                  break;
                }

                _context11.next = 24;
                return this.updateEntryInStrapi("products", product.id, product);

              case 24:
                response = _context11.sent;
                console.log("Product Strapi Id - ", response);

              case 26:
                return _context11.abrupt("return", product);

              case 29:
                _context11.prev = 29;
                _context11.t0 = _context11["catch"](9);
                throw _context11.t0;

              case 32:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this, [[9, 29]]);
      }));

      function updateProductInStrapi(_x14) {
        return _updateProductInStrapi.apply(this, arguments);
      }

      return updateProductInStrapi;
    }()
  }, {
    key: "updateProductVariantInStrapi",
    value: function () {
      var _updateProductVariantInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(data) {
        var hasType, updateFields, found, ignore, variant, response;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.getType("product-variants").then(function (res) {
                  // console.log(res.data)
                  return true;
                })["catch"](function (error) {
                  // console.log(error.response.status)
                  return false;
                });

              case 2:
                hasType = _context12.sent;

                if (hasType) {
                  _context12.next = 5;
                  break;
                }

                return _context12.abrupt("return", Promise.resolve());

              case 5:
                updateFields = ["title", "prices", "sku", "material", "weight", "length", "height", "origin_country", "options"]; // Update came directly from product variant service so only act on a couple
                // of fields. When the update comes from the product we want to ensure
                // references are set up correctly so we run through everything.

                if (!data.fields) {
                  _context12.next = 10;
                  break;
                }

                found = data.fields.find(function (f) {
                  return updateFields.includes(f);
                });

                if (found) {
                  _context12.next = 10;
                  break;
                }

                return _context12.abrupt("return", Promise.resolve());

              case 10:
                _context12.prev = 10;
                _context12.next = 13;
                return this.shouldIgnore_(data.id, "strapi");

              case 13:
                ignore = _context12.sent;

                if (!ignore) {
                  _context12.next = 16;
                  break;
                }

                return _context12.abrupt("return", Promise.resolve());

              case 16:
                _context12.next = 18;
                return this.productVariantService_.retrieve(data.id, {
                  relations: ["prices", "options"]
                });

              case 18:
                variant = _context12.sent;
                console.log(variant);

                if (!variant) {
                  _context12.next = 25;
                  break;
                }

                _context12.next = 23;
                return this.updateEntryInStrapi("product-variants", variant.id, variant);

              case 23:
                response = _context12.sent;
                console.log("Variant Strapi Id - ", response);

              case 25:
                return _context12.abrupt("return", variant);

              case 28:
                _context12.prev = 28;
                _context12.t0 = _context12["catch"](10);
                console.log("Failed to update product variant", data.id);
                throw _context12.t0;

              case 32:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this, [[10, 28]]);
      }));

      function updateProductVariantInStrapi(_x15) {
        return _updateProductVariantInStrapi.apply(this, arguments);
      }

      return updateProductVariantInStrapi;
    }()
  }, {
    key: "deleteProductInStrapi",
    value: function () {
      var _deleteProductInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(data) {
        var hasType, ignore;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this.getType("products").then(function () {
                  return true;
                })["catch"](function (err) {
                  // console.log(err)
                  return false;
                });

              case 2:
                hasType = _context13.sent;

                if (hasType) {
                  _context13.next = 5;
                  break;
                }

                return _context13.abrupt("return", Promise.resolve());

              case 5:
                _context13.next = 7;
                return this.shouldIgnore_(data.id, "strapi");

              case 7:
                ignore = _context13.sent;

                if (!ignore) {
                  _context13.next = 10;
                  break;
                }

                return _context13.abrupt("return", Promise.resolve());

              case 10:
                _context13.next = 12;
                return this.deleteEntryInStrapi("products", data.id);

              case 12:
                return _context13.abrupt("return", _context13.sent);

              case 13:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function deleteProductInStrapi(_x16) {
        return _deleteProductInStrapi.apply(this, arguments);
      }

      return deleteProductInStrapi;
    }()
  }, {
    key: "deleteProductVariantInStrapi",
    value: function () {
      var _deleteProductVariantInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(data) {
        var hasType, ignore;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this.getType("product-variants").then(function () {
                  return true;
                })["catch"](function (err) {
                  // console.log(err)
                  return false;
                });

              case 2:
                hasType = _context14.sent;

                if (hasType) {
                  _context14.next = 5;
                  break;
                }

                return _context14.abrupt("return", Promise.resolve());

              case 5:
                _context14.next = 7;
                return this.shouldIgnore_(data.id, "strapi");

              case 7:
                ignore = _context14.sent;

                if (!ignore) {
                  _context14.next = 10;
                  break;
                }

                return _context14.abrupt("return", Promise.resolve());

              case 10:
                _context14.next = 12;
                return this.deleteEntryInStrapi("product-variants", data.id);

              case 12:
                return _context14.abrupt("return", _context14.sent);

              case 13:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function deleteProductVariantInStrapi(_x17) {
        return _deleteProductVariantInStrapi.apply(this, arguments);
      }

      return deleteProductVariantInStrapi;
    }() // Blocker - Delete Region API

  }, {
    key: "deleteRegionInStrapi",
    value: function () {
      var _deleteRegionInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(data) {
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15);
      }));

      function deleteRegionInStrapi(_x18) {
        return _deleteRegionInStrapi.apply(this, arguments);
      }

      return deleteRegionInStrapi;
    }()
  }, {
    key: "createProductCategoryInStrapi",
    value: function () {
      var _createProductCategoryInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(productCategoryId) {
        var hasType, productCategory, response;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this.getType("product-categories").then(function () {
                  return true;
                })["catch"](function () {
                  return false;
                });

              case 2:
                hasType = _context16.sent;

                if (hasType) {
                  _context16.next = 6;
                  break;
                }

                console.log('Type "product-categories" doesnt exist in Strapi');
                return _context16.abrupt("return", Promise.resolve());

              case 6:
                _context16.prev = 6;
                _context16.next = 9;
                return this.productCategory_.retrieve(productCategoryId, {
                  relations: ["parent_category" //   "category_children",
                  ],
                  select: ["id", "name", "description", "handle"]
                });

              case 9:
                productCategory = _context16.sent;
                _context16.next = 12;
                return this.createEntryInStrapi("product-categories", productCategoryId, productCategory);

              case 12:
                response = _context16.sent;
                console.log("Product-Category Strapi Id - ", response);
                return _context16.abrupt("return", response);

              case 17:
                _context16.prev = 17;
                _context16.t0 = _context16["catch"](6);
                throw _context16.t0;

              case 20:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this, [[6, 17]]);
      }));

      function createProductCategoryInStrapi(_x19) {
        return _createProductCategoryInStrapi.apply(this, arguments);
      }

      return createProductCategoryInStrapi;
    }()
  }, {
    key: "updateProductCategoryInStrapi",
    value: function () {
      var _updateProductCategoryInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(data) {
        var hasType, ignore, productCategory, response;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _context17.next = 2;
                return this.getType("product-categories").then(function (res) {
                  // console.log(res.data)
                  return true;
                })["catch"](function (error) {
                  // console.log(error.response.status)
                  return false;
                });

              case 2:
                hasType = _context17.sent;

                if (hasType) {
                  _context17.next = 5;
                  break;
                }

                return _context17.abrupt("return", Promise.resolve());

              case 5:
                _context17.prev = 5;
                _context17.next = 8;
                return this.shouldIgnore_(data.id, "strapi");

              case 8:
                ignore = _context17.sent;

                if (!ignore) {
                  _context17.next = 11;
                  break;
                }

                return _context17.abrupt("return");

              case 11:
                _context17.next = 13;
                return this.productCategory_.retrieve(data.id, {
                  relations: ["parent_category" // "category_children",
                  ],
                  select: ["id", "name", "description", "handle"]
                });

              case 13:
                productCategory = _context17.sent;

                if (!productCategory) {
                  _context17.next = 19;
                  break;
                }

                _context17.next = 17;
                return this.updateEntryInStrapi("product-categories", productCategory.id, productCategory);

              case 17:
                response = _context17.sent;
                console.log("productCategory Strapi Id - ", response);

              case 19:
                return _context17.abrupt("return", productCategory);

              case 22:
                _context17.prev = 22;
                _context17.t0 = _context17["catch"](5);
                throw _context17.t0;

              case 25:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this, [[5, 22]]);
      }));

      function updateProductCategoryInStrapi(_x20) {
        return _updateProductCategoryInStrapi.apply(this, arguments);
      }

      return updateProductCategoryInStrapi;
    }()
  }, {
    key: "deleteProductCategoryInStrapi",
    value: function () {
      var _deleteProductCategoryInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(data) {
        var hasType, ignore;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.next = 2;
                return this.getType("product-categories").then(function () {
                  return true;
                })["catch"](function (err) {
                  // console.log(err)
                  return false;
                });

              case 2:
                hasType = _context18.sent;

                if (hasType) {
                  _context18.next = 5;
                  break;
                }

                return _context18.abrupt("return", Promise.resolve());

              case 5:
                _context18.next = 7;
                return this.shouldIgnore_(data.id, "strapi");

              case 7:
                ignore = _context18.sent;

                if (!ignore) {
                  _context18.next = 10;
                  break;
                }

                return _context18.abrupt("return", Promise.resolve());

              case 10:
                _context18.next = 12;
                return this.deleteEntryInStrapi("product-categories", data.id);

              case 12:
                return _context18.abrupt("return", _context18.sent);

              case 13:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function deleteProductCategoryInStrapi(_x21) {
        return _deleteProductCategoryInStrapi.apply(this, arguments);
      }

      return deleteProductCategoryInStrapi;
    }()
  }, {
    key: "createProductCollectionInStrapi",
    value: function () {
      var _createProductCollectionInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(productCollectionId) {
        var hasType, productCollection, response;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _context19.next = 2;
                return this.getType("product-collections").then(function () {
                  return true;
                })["catch"](function () {
                  return false;
                });

              case 2:
                hasType = _context19.sent;

                if (hasType) {
                  _context19.next = 6;
                  break;
                }

                console.log('Type "product-collections" doesnt exist in Strapi');
                return _context19.abrupt("return", Promise.resolve());

              case 6:
                _context19.prev = 6;
                _context19.next = 9;
                return this.productCollection_.retrieve(productCollectionId, {
                  select: ["id", "title", "handle"]
                });

              case 9:
                productCollection = _context19.sent;
                _context19.next = 12;
                return this.createEntryInStrapi("product-collections", productCollectionId, productCollection);

              case 12:
                response = _context19.sent;
                console.log("Product Collection Strapi Id - ", response);
                return _context19.abrupt("return", response);

              case 17:
                _context19.prev = 17;
                _context19.t0 = _context19["catch"](6);
                throw _context19.t0;

              case 20:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this, [[6, 17]]);
      }));

      function createProductCollectionInStrapi(_x22) {
        return _createProductCollectionInStrapi.apply(this, arguments);
      }

      return createProductCollectionInStrapi;
    }()
  }, {
    key: "updateProductCollectionInStrapi",
    value: function () {
      var _updateProductCollectionInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(data) {
        var hasType, ignore, productCollection, response;
        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                _context20.next = 2;
                return this.getType("product-collections").then(function (res) {
                  // console.log(res.data)
                  return true;
                })["catch"](function (error) {
                  // console.log(error.response.status)
                  return false;
                });

              case 2:
                hasType = _context20.sent;

                if (hasType) {
                  _context20.next = 5;
                  break;
                }

                return _context20.abrupt("return", Promise.resolve());

              case 5:
                _context20.prev = 5;
                _context20.next = 8;
                return this.shouldIgnore_(data.id, "strapi");

              case 8:
                ignore = _context20.sent;

                if (!ignore) {
                  _context20.next = 11;
                  break;
                }

                return _context20.abrupt("return");

              case 11:
                _context20.next = 13;
                return this.productCollection_.retrieve(data.id, {
                  select: ["id", "title", "handle"]
                });

              case 13:
                productCollection = _context20.sent;

                if (!productCollection) {
                  _context20.next = 19;
                  break;
                }

                _context20.next = 17;
                return this.updateEntryInStrapi("product-collections", productCollection.id, productCollection);

              case 17:
                response = _context20.sent;
                console.log("productCollection Strapi Id - ", response);

              case 19:
                return _context20.abrupt("return", productCollection);

              case 22:
                _context20.prev = 22;
                _context20.t0 = _context20["catch"](5);
                throw _context20.t0;

              case 25:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this, [[5, 22]]);
      }));

      function updateProductCollectionInStrapi(_x23) {
        return _updateProductCollectionInStrapi.apply(this, arguments);
      }

      return updateProductCollectionInStrapi;
    }()
  }, {
    key: "deleteProductCollectionInStrapi",
    value: function () {
      var _deleteProductCollectionInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(data) {
        var hasType, ignore;
        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return this.getType("product-collections").then(function () {
                  return true;
                })["catch"](function (err) {
                  // console.log(err)
                  return false;
                });

              case 2:
                hasType = _context21.sent;

                if (hasType) {
                  _context21.next = 5;
                  break;
                }

                return _context21.abrupt("return", Promise.resolve());

              case 5:
                _context21.next = 7;
                return this.shouldIgnore_(data.id, "strapi");

              case 7:
                ignore = _context21.sent;

                if (!ignore) {
                  _context21.next = 10;
                  break;
                }

                return _context21.abrupt("return", Promise.resolve());

              case 10:
                _context21.next = 12;
                return this.deleteEntryInStrapi("product-collections", data.id);

              case 12:
                return _context21.abrupt("return", _context21.sent);

              case 13:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function deleteProductCollectionInStrapi(_x24) {
        return _deleteProductCollectionInStrapi.apply(this, arguments);
      }

      return deleteProductCollectionInStrapi;
    }()
  }, {
    key: "updateProductsWithinCollectionInStrapi",
    value: function () {
      var _updateProductsWithinCollectionInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(data) {
        var hasType, _iterator, _step, productId, ignore, product, response;

        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                hasType = this.getType('product-collections').then(function () {
                  return true;
                })["catch"](function () {
                  return false;
                });

                if (hasType) {
                  _context22.next = 3;
                  break;
                }

                return _context22.abrupt("return", {
                  status: 400
                });

              case 3:
                _context22.prev = 3;
                _iterator = _createForOfIteratorHelper(data.productIds);
                _context22.prev = 5;

                _iterator.s();

              case 7:
                if ((_step = _iterator.n()).done) {
                  _context22.next = 24;
                  break;
                }

                productId = _step.value;
                _context22.next = 11;
                return this.shouldIgnore_(productId, 'strapi');

              case 11:
                ignore = _context22.sent;

                if (!ignore) {
                  _context22.next = 15;
                  break;
                }

                this.logger.info('Strapi has just added this product to collection which triggered this function. IGNORING... ');
                return _context22.abrupt("continue", 22);

              case 15:
                _context22.next = 17;
                return this.productService_.retrieve(productId, {
                  relations: ['collection'],
                  select: ['id']
                });

              case 17:
                product = _context22.sent;

                if (!product) {
                  _context22.next = 22;
                  break;
                }

                _context22.next = 21;
                return this.updateEntryInStrapi("products", productId, product);

              case 21:
                response = _context22.sent;

              case 22:
                _context22.next = 7;
                break;

              case 24:
                _context22.next = 29;
                break;

              case 26:
                _context22.prev = 26;
                _context22.t0 = _context22["catch"](5);

                _iterator.e(_context22.t0);

              case 29:
                _context22.prev = 29;

                _iterator.f();

                return _context22.finish(29);

              case 32:
                _context22.next = 38;
                break;

              case 34:
                _context22.prev = 34;
                _context22.t1 = _context22["catch"](3);
                this.logger.error('Error updating products in collection', _context22.t1);
                throw _context22.t1;

              case 38:
                return _context22.abrupt("return", {
                  status: 400
                });

              case 39:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this, [[3, 34], [5, 26, 29, 32]]);
      }));

      function updateProductsWithinCollectionInStrapi(_x25) {
        return _updateProductsWithinCollectionInStrapi.apply(this, arguments);
      }

      return updateProductsWithinCollectionInStrapi;
    }()
  }, {
    key: "getType",
    value: function () {
      var _getType = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(type) {
        var config;
        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                if (this.strapiAuthToken) {
                  _context23.next = 3;
                  break;
                }

                _context23.next = 3;
                return this.loginToStrapi();

              case 3:
                config = {
                  url: "".concat(this.strapi_URL_STRING, "/api/").concat(type),
                  method: "get",
                  headers: {
                    Authorization: "Bearer ".concat(this.strapiAuthToken)
                  }
                };
                return _context23.abrupt("return", (0, _axios["default"])(config));

              case 5:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function getType(_x26) {
        return _getType.apply(this, arguments);
      }

      return getType;
    }()
  }, {
    key: "checkStrapiHealth",
    value: function () {
      var _checkStrapiHealth = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
        var config;
        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                config = {
                  method: "head",
                  url: "".concat(this.strapi_URL_STRING, "/_health")
                };
                console.log("Checking strapi Health");
                return _context24.abrupt("return", (0, _axios["default"])(config).then(function (res) {
                  if (res.status === 204) {
                    console.log("\n Strapi Health Check OK \n");
                  }

                  return true;
                })["catch"](function (error) {
                  if (error.code === "ECONNREFUSED") {
                    console.error("\nCould not connect to strapi. Please make sure strapi is running.\n");
                  }

                  return false;
                }));

              case 3:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function checkStrapiHealth() {
        return _checkStrapiHealth.apply(this, arguments);
      }

      return checkStrapiHealth;
    }()
  }, {
    key: "loginToStrapi",
    value: function () {
      var _loginToStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
        var _this4 = this;

        var config;
        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                config = {
                  method: "post",
                  url: "".concat(this.strapi_URL_STRING, "/api/auth/local"),
                  data: {
                    identifier: this.options_.strapi_medusa_user,
                    password: this.options_.strapi_medusa_password
                  }
                };
                return _context25.abrupt("return", (0, _axios["default"])(config).then(function (res) {
                  if (res.data.jwt) {
                    _this4.strapiAuthToken = res.data.jwt;
                    console.log("\n Successfully logged in to Strapi \n");
                    return true;
                  }

                  return false;
                })["catch"](function (error) {
                  if (error) {
                    throw new Error("\nError while trying to login to strapi\n" + error);
                  }
                }));

              case 2:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function loginToStrapi() {
        return _loginToStrapi.apply(this, arguments);
      }

      return loginToStrapi;
    }()
  }, {
    key: "createEntryInStrapi",
    value: function () {
      var _createEntryInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(type, id, data) {
        var _this5 = this;

        var config;
        return regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                if (this.strapiAuthToken) {
                  _context27.next = 3;
                  break;
                }

                _context27.next = 3;
                return this.loginToStrapi();

              case 3:
                config = {
                  method: "post",
                  url: "".concat(this.strapi_URL_STRING, "/api/").concat(type),
                  headers: {
                    Authorization: "Bearer ".concat(this.strapiAuthToken)
                  },
                  data: data
                };
                return _context27.abrupt("return", (0, _axios["default"])(config).then(function (res) {
                  if (res.data.id) {
                    _this5.addIgnore_(id, "medusa");

                    return res.data.id;
                  }

                  return null;
                })["catch"]( /*#__PURE__*/function () {
                  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(error) {
                    return regeneratorRuntime.wrap(function _callee26$(_context26) {
                      while (1) {
                        switch (_context26.prev = _context26.next) {
                          case 0:
                            if (!(error && error.response && error.response.status)) {
                              _context26.next = 2;
                              break;
                            }

                            throw new Error("Error while trying to create entry in strapi - " + type);

                          case 2:
                          case "end":
                            return _context26.stop();
                        }
                      }
                    }, _callee26);
                  }));

                  return function (_x30) {
                    return _ref4.apply(this, arguments);
                  };
                }()));

              case 5:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function createEntryInStrapi(_x27, _x28, _x29) {
        return _createEntryInStrapi.apply(this, arguments);
      }

      return createEntryInStrapi;
    }()
  }, {
    key: "updateEntryInStrapi",
    value: function () {
      var _updateEntryInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(type, id, data) {
        var _this6 = this;

        var config;
        return regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                if (this.strapiAuthToken) {
                  _context29.next = 3;
                  break;
                }

                _context29.next = 3;
                return this.loginToStrapi();

              case 3:
                config = {
                  method: "put",
                  url: "".concat(this.strapi_URL_STRING, "/api/").concat(type, "/").concat(id),
                  headers: {
                    Authorization: "Bearer ".concat(this.strapiAuthToken)
                  },
                  data: data
                };
                return _context29.abrupt("return", (0, _axios["default"])(config).then(function (res) {
                  if (res.data.id) {
                    _this6.addIgnore_(id, "medusa");

                    return res.data.id;
                  }

                  return null;
                })["catch"]( /*#__PURE__*/function () {
                  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(error) {
                    return regeneratorRuntime.wrap(function _callee28$(_context28) {
                      while (1) {
                        switch (_context28.prev = _context28.next) {
                          case 0:
                            if (!(error && error.response && error.response.status)) {
                              _context28.next = 2;
                              break;
                            }

                            throw new Error("Error while trying to update entry in strapi ");

                          case 2:
                          case "end":
                            return _context28.stop();
                        }
                      }
                    }, _callee28);
                  }));

                  return function (_x34) {
                    return _ref5.apply(this, arguments);
                  };
                }()));

              case 5:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function updateEntryInStrapi(_x31, _x32, _x33) {
        return _updateEntryInStrapi.apply(this, arguments);
      }

      return updateEntryInStrapi;
    }()
  }, {
    key: "deleteEntryInStrapi",
    value: function () {
      var _deleteEntryInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31(type, id) {
        var config;
        return regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                if (this.strapiAuthToken) {
                  _context31.next = 3;
                  break;
                }

                _context31.next = 3;
                return this.loginToStrapi();

              case 3:
                config = {
                  method: "delete",
                  url: "".concat(this.strapi_URL_STRING, "/api/").concat(type, "/").concat(id),
                  headers: {
                    Authorization: "Bearer ".concat(this.strapiAuthToken)
                  }
                };
                return _context31.abrupt("return", (0, _axios["default"])(config).then(function (res) {
                  if (res.data.result) {
                    return res.data.data;
                  }

                  return null;
                })["catch"]( /*#__PURE__*/function () {
                  var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30(error) {
                    return regeneratorRuntime.wrap(function _callee30$(_context30) {
                      while (1) {
                        switch (_context30.prev = _context30.next) {
                          case 0:
                            if (!(error && error.response && error.response.status)) {
                              _context30.next = 2;
                              break;
                            }

                            throw new Error("Error while trying to delete entry in strapi ");

                          case 2:
                          case "end":
                            return _context30.stop();
                        }
                      }
                    }, _callee30);
                  }));

                  return function (_x37) {
                    return _ref6.apply(this, arguments);
                  };
                }()));

              case 5:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));

      function deleteEntryInStrapi(_x35, _x36) {
        return _deleteEntryInStrapi.apply(this, arguments);
      }

      return deleteEntryInStrapi;
    }()
  }, {
    key: "doesEntryExistInStrapi",
    value: function () {
      var _doesEntryExistInStrapi = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32(type, id) {
        var config;
        return regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                if (this.strapiAuthToken) {
                  _context32.next = 3;
                  break;
                }

                _context32.next = 3;
                return this.loginToStrapi();

              case 3:
                config = {
                  method: "get",
                  url: "".concat(this.strapi_URL_STRING, "/api/").concat(type, "/").concat(id),
                  headers: {
                    Authorization: "Bearer ".concat(this.strapiAuthToken)
                  }
                };
                return _context32.abrupt("return", (0, _axios["default"])(config).then(function (res) {
                  return true;
                })["catch"](function (error) {
                  console.log(error.response.status, id);
                  throw new Error("Given entry doesn't exist in Strapi");
                }));

              case 5:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32, this);
      }));

      function doesEntryExistInStrapi(_x38, _x39) {
        return _doesEntryExistInStrapi.apply(this, arguments);
      }

      return doesEntryExistInStrapi;
    }()
  }]);

  return UpdateStrapiService;
}(_medusaInterfaces.BaseService);

var _default = UpdateStrapiService;
exports["default"] = _default;